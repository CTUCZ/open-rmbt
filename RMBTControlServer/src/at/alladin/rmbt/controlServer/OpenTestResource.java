/*******************************************************************************
 * Copyright 2013 alladin-IT OG
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package at.alladin.rmbt.controlServer;

import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.restlet.resource.Get;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.restlet.data.Status;

public class OpenTestResource extends ServerResource
{
    
    //maximum of rows sent in one single request
    public final int MAXROWS = 400;
    
    //all fields that should be displayed in a detailed request
    private final String[] openDataFieldsFull = {"open_uuid", "open_test_uuid", "time", "cat_technology", "network_type", "lat", "long", "loc_src", "zip_code",
        "download_kbit", "upload_kbit", "ping_ms", "signal_strength", "server_name", "test_duration", "num_threads", "plattform", "model", "client_version",
        "network_mcc_mnc", "network_name", "sim_mcc_mnc", "connection", "asn", "ip_anonym", "ndt_download_kbit", "ndt_upload_kbit"};
    
    //all fields that should be displayed in a general request (e.g. all tests for one user)
    private final String[] openDataFieldsSummary = {"open_uuid", "open_test_uuid", "time", "lat", "long", "download_kbit", "upload_kbit", 
        "ping_ms", "signal_strength",  "plattform"};
    
    //all fields that are numbers (and are formatted as numbers in json)
    private final HashSet<String> openDataNumberFields = new HashSet<String>(Arrays.asList(new String[]{"time", "lat", "long", "zip_code", "download_kbit",
        "upload_kbit","ping_ms","signal_strength","test_duration","num_threads","ndt_download_kbit","ndt_upload_kbit","asn"}));
    
    @Get("json")
    public String request(final String entity)
    {
        addAllowOrigin();

        //users and tests are correctly routet by controlserver.java
        if (getRequest().getAttributes().containsKey("open_uuid")) {
            //if is starts with upper-case 'P' => it is an open user uuid
            String openUUID = getRequest().getAttributes().get("open_uuid").toString();
            String offset = getRequest().getResourceRef().getQueryAsForm().getFirstValue("cursor");
            if (offset != null) {
                try {
                    long offsetL = Long.parseLong(offset);
                    return getLastOpenUUIDs(openUUID,offsetL);
                } catch (NumberFormatException e) {
                   return getLastOpenUUIDs(openUUID,0); 
                }
            } else {
                return getLastOpenUUIDs(openUUID,0);
            }
        } 
        else if (getRequest().getAttributes().containsKey("open_test_uuid")) {
            //else -> it is a test uuid (starts with 'O')
            String openUUID = getRequest().getAttributes().get("open_test_uuid").toString();
            return getSingleOpenTest(openUUID);
        } else {
            String offset = getRequest().getResourceRef().getQueryAsForm().getFirstValue("cursor");
            if (offset != null) {
                try {
                    long offsetL = Long.parseLong(offset);
                    return getLastOpenUUIDs(null,offsetL);
                } catch (NumberFormatException e) {
                   return getLastOpenUUIDs(null,0); 
                }
            } else {
                return getLastOpenUUIDs(null,0);
            }

        }
    }
    
    private String getSingleOpenTest(String openTestUUID) {       
        final String sql = "SELECT" +
                " ('P' || t.open_uuid) open_uuid," +
                " ('O' || t.open_test_uuid) open_test_uuid," + 
                " to_char(t.time AT TIME ZONE 'UTC', 'YYYY-MM-DD HH24:MI') \"time\"," +
                " nt.group_name cat_technology," +
                " nt.name network_type," +
                " t.geo_lat lat," +
                " t.geo_long long," +
                " t.geo_provider loc_src," +
                " t.zip_code," +
                " t.speed_download download_kbit," +
                " t.speed_upload upload_kbit," +
                " (t.ping_shortest::float / 1000000) ping_ms," +
                " t.signal_strength," +
                " ts.name server_name," +
                " duration test_duration," +
                " num_threads," +
                " plattform," +
                " COALESCE(adm.fullname, t.model) model," +
                " client_software_version client_version," +
                " network_operator network_mcc_mnc," +
                " network_operator_name network_name," +
                " network_sim_operator sim_mcc_mnc," +
                " nat_type \"connection\"," +
                " public_ip_asn asn," +
                " client_public_ip_anonymized ip_anonym," +
                " (ndt.s2cspd*1000)::int ndt_download_kbit," +
                " (ndt.c2sspd*1000)::int ndt_upload_kbit" +
                " FROM test t" +
                " LEFT JOIN network_type nt ON nt.uid=t.network_type" +
                " LEFT JOIN android_device_map adm ON adm.codename=t.model" +
                " LEFT JOIN test_server ts ON ts.uid=t.server_id" +
                " LEFT JOIN test_ndt ndt ON t.uid=ndt.test_id" +
                " WHERE " +
                " t.deleted = false" +
                " AND time > '2012-12-22 01:00'" +
                " AND status = 'FINISHED' " +
                " AND t.open_test_uuid = ? ";
        
        final String[] columns;
        PreparedStatement ps = null;
        ResultSet rs = null;
        final JSONObject response = new JSONObject();
        try
        {
            ps = conn.prepareStatement(sql);
            
            //openTestIDs are starting with "O"
            if (openTestUUID != null && openTestUUID.startsWith("O")) {
                openTestUUID = openTestUUID.substring(1);
            }
            ps.setObject(1, openTestUUID,Types.OTHER);
            
            if (!ps.execute())
                return null;
            rs = ps.getResultSet();
            
            
            if (rs.next())
            {
                //fetch data for every field
                for (int i=0;i<openDataFieldsFull.length;i++) {
                    
                    //convert data to correct json response
                    final Object obj = rs.getObject(openDataFieldsFull[i]);
                    if (obj==null) {
                        response.put(openDataFieldsFull[i], JSONObject.NULL);
                    } else if (openDataNumberFields.contains(openDataFieldsFull[i])) {
                        response.put(openDataFieldsFull[i], JSONObject.stringToValue(obj.toString()));
                    } else {
                        response.put(openDataFieldsFull[i], obj.toString());
                    }
                    
                }
                
                
                //also load download/upload-speed-data if possible
                
                //@TODO: Find out db-structure, load real data
                //for now: mock it
                JSONObject speed_curve = new JSONObject();
                JSONArray download_speeds = new JSONArray();
                JSONArray upload_speeds = new JSONArray();
                int ground_speed_up = 1000 + (int) (Math.random()*1024*80);
                int ground_speed_down = 1000 + (int) (Math.random()*1024*80);
                for (int i=0;i<20;i++) {
                    int off = (int) (Math.random()*ground_speed_down*0.2);
                    int time = (i+1)*15; //each 15 ms (?)
                    JSONObject obj = new JSONObject();
                    obj.put("time_elapsed", time);
                    obj.put("kbps",ground_speed_down+off);
                    download_speeds.put(obj);
                }
                for (int i=20;i<40;i++) {
                    int off = (int) (Math.random()*ground_speed_up*0.2);
                    int time = (i+1)*15; //each 15 ms (?)
                    JSONObject obj = new JSONObject();
                    obj.put("time_elapsed", time);
                    obj.put("kbps",ground_speed_up+off);
                    upload_speeds.put(obj);
                }
                speed_curve.put("upload", upload_speeds);
                speed_curve.put("download", download_speeds);
                response.put("speed_curve", speed_curve);
                
            } else {
                //invalid open_uuid
                setStatus(Status.CLIENT_ERROR_NOT_FOUND);
                response.put("error","invalid open-uuid");
            }
        }
        catch (final JSONException e) {
            Logger.getLogger(OpenTestResource.class.getName()).log(Level.SEVERE, null, e);
        } catch (SQLException ex) {
            try {
                setStatus(Status.CLIENT_ERROR_NOT_FOUND);
                response.put("error","invalid open-uuid");
            } catch (JSONException ex1) {
                Logger.getLogger(OpenTestResource.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(OpenTestResource.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            try
            {
                if (rs != null)
                    rs.close();
                if (ps != null)
                    ps.close();
            }
            catch (final SQLException e)
            {
                Logger.getLogger(OpenTestResource.class.getName()).log(Level.SEVERE, null, e);
            }
        }

        return response.toString();
    }
        
    
    private String getLastOpenUUIDs(String openUUID, long offset) {
        final String WHERE = (openUUID == null) ? "" : " AND t.open_uuid = ? ";
        final String offsetString = (offset>0)? " AND t.uid<"+offset:"";
        final String sql = "SELECT t.uid AS cursor, " +
                " ('P' || t.open_uuid) open_uuid," +
                " ('O' || t.open_test_uuid) open_test_uuid," + 
                " to_char(t.time AT TIME ZONE 'UTC', 'YYYY-MM-DD HH24:MI') \"time\"," +
                //" nt.group_name cat_technology," +
                //" nt.name network_type," +
                " t.geo_lat lat," +
                " t.geo_long long," +
                //" t.geo_provider loc_src," +
                //" t.zip_code," +
                " t.speed_download download_kbit," +
                " t.speed_upload upload_kbit," +
                " (t.ping_shortest::float / 1000000) ping_ms," +
                " t.signal_strength," +
                //" ts.name server_name," +
                //" duration test_duration," +
                //" num_threads," +
                " plattform " +
                //" COALESCE(adm.fullname, t.model) model," +
                //" client_software_version client_version," +
                //" network_operator network_mcc_mnc," +
                //" network_operator_name network_name," +
                //" network_sim_operator sim_mcc_mnc," +
                //" nat_type \"connection\"," +
                //" public_ip_asn asn," +
                //" client_public_ip_anonymized ip_anonym," +
                //" (ndt.s2cspd*1000)::int ndt_download_kbit," +
                //" (ndt.c2sspd*1000)::int ndt_upload_kbit" +
                " FROM test t" +
                " LEFT JOIN network_type nt ON nt.uid=t.network_type" +
                " LEFT JOIN android_device_map adm ON adm.codename=t.model" +
                " LEFT JOIN test_server ts ON ts.uid=t.server_id" +
                " LEFT JOIN test_ndt ndt ON t.uid=ndt.test_id" +
                " WHERE " +
                " t.deleted = false" +
                " AND time > '2012-12-22 01:00'" +
                " AND status = 'FINISHED'" + WHERE + offsetString +
                " ORDER BY t.uid DESC " +
                " LIMIT " + MAXROWS;
        
        //openUUIDs are starting with "P"
        if (openUUID != null && openUUID.startsWith("P")) {
            openUUID = openUUID.substring(1);
        }
        
        final String[] columns;
        final List<String[]> data = new ArrayList<String[]>();
        PreparedStatement ps = null;
        ResultSet rs = null;
        final JSONObject response = new JSONObject();
        final JSONArray resultList = new JSONArray();
        try
        {
            ps = conn.prepareStatement(sql);
            //where: if openUUID is set
            if (openUUID != null) {
                ps.setObject(1, openUUID, Types.OTHER);
            }

            if (!ps.execute())
                return null;
            rs = ps.getResultSet();
            
            
            long lastUID=0;
            while (rs.next())
            {
                final JSONObject jsonItem = new JSONObject();
                
                for (int i=0;i<openDataFieldsSummary.length;i++) {
                    final Object obj = rs.getObject(openDataFieldsSummary[i]);
                    if (obj==null) {
                        jsonItem.put(openDataFieldsSummary[i], JSONObject.NULL);
                    } else if (openDataNumberFields.contains(openDataFieldsSummary[i])) {
                        jsonItem.put(openDataFieldsSummary[i], JSONObject.stringToValue(obj.toString()));
                    } else {
                        jsonItem.put(openDataFieldsSummary[i], obj.toString());
                    }
                    
                }
                lastUID = rs.getLong("cursor");
                resultList.put(jsonItem);
            }
            
             //if there are more results than we send, use pagination
            if (resultList.length() == MAXROWS) {
                String nextPage = getRequest().getResourceRef().getHostIdentifier() + getRequest().getResourceRef().getPath() + "?cursor=" + lastUID;
                response.put("next_page", nextPage);
            }
        }
        catch (final JSONException e) {
            Logger.getLogger(OpenTestResource.class.getName()).log(Level.SEVERE, null, e);
        } catch (SQLException ex) {
            Logger.getLogger(OpenTestResource.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            try
            {
                if (rs != null)
                    rs.close();
                if (ps != null)
                    ps.close();
            }
            catch (final SQLException e)
            {
                e.printStackTrace();
            }
        }
        try {
            response.put("opentests", resultList);
        } catch(JSONException e) {
            Logger.getLogger(OpenTestResource.class.getName()).log(Level.SEVERE, null, e);
        }
        return response.toString();
    }
    
}
